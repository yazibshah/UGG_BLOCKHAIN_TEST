Smart Contract Documentation

1. Overview
The TwoFactorAuth smart contract implements a simple two-factor authentication (2FA) system on the Ethereum blockchain. 
It allows users to register their public keys and OTP seeds, generate OTPs, and authenticate themselves using these OTPs.

2.Architecture
The smart contract consists of a single contract named TwoFactorAuth. It utilizes a struct User to store user information,
including the user's public key, OTP seed, last updated timestamp, and authentication status. The user data is stored in a 
mapping users, with the key being the username.

3.Functions

3.1 registerUser
function registerUser(string memory _username, address _publicKey, uint256 _otpSeed) external returns (string memory)
This function allows users to register themselves by providing a username, public key, and OTP seed. It ensures that the username
is unique and emits an event upon successful registration.

3.2 generateOTP
function generateOTP(string memory _username) external view returns (uint256)
This function generates a one-time password (OTP) for a registered user based on their OTP seed. 
It checks the elapsed time since the last update and ensures that the OTP is generated within the specified duration.

3.3 authenticateUser
function authenticateUser(string memory _username) external view returns (bool)
This function allows users to authenticate themselves by checking their authentication status. 
It verifies that the user is registered and returns the authentication status.

3.4 _authenticateUser

function _authenticateUser(string memory _username, address _publicKey, uint256 _otp) external
This internal function is used to authenticate a user by comparing the OTP provided by the user with the OTP generated by the system.
It updates the user's authentication status based on the correctness of the OTP.

4. Usage
User Registration: Users can register themselves by calling the registerUser function with their desired username, public key,
and OTP seed.
OTP Generation: Once registered, users can generate OTPs using the generateOTP function, which they can use for authentication.
User Authentication: Users can authenticate themselves by providing their username, public key, and OTP to the _authenticateUser function. 
The system will verify the OTP and update the user's authentication status accordingly.

Example
TwoFactorAuth authContract = TwoFactorAuth(<contract-address>);

// Register a user
authContract.registerUser("user1", <public-key>, <otp-seed>);

// Generate OTP for the registered user
uint256 otp = authContract.generateOTP("user1");

// Authenticate the user using OTP
authContract._authenticateUser("user1", <public-key>, otp);


BSC Scan Verification Link:
https://testnet.bscscan.com/address/0x5BD6A384971bE4569948ed523feF6e145DD46dAE